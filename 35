package org.example;

public class Matrix {
    private double[][] data;

    // Конструктор для создания матрицы
    public Matrix(double[][] data) {
        this.data = data;
    }

    // Метод для получения размера матрицы
    public int getRows() {
        return data.length;
    }

    public int getColumns() {
        return data[0].length;
    }

    // Метод для сложения матриц
    public Matrix add(Matrix other) {
        if (this.getRows() != other.getRows() || this.getColumns() != other.getColumns()) {
            throw new IllegalArgumentException("Размеры матриц не совпадают для сложения.");
        }
        double[][] resultData = new double[this.getRows()][this.getColumns()];
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                resultData[i][j] = this.data[i][j] + other.data[i][j];
            }
        }
        return new Matrix(resultData);
    }

    // Метод для вычитания матриц
    public Matrix subtract(Matrix other) {
        if (this.getRows() != other.getRows() || this.getColumns() != other.getColumns()) {
            throw new IllegalArgumentException("Размеры матриц не совпадают для вычитания.");
        }
        double[][] resultData = new double[this.getRows()][this.getColumns()];
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                resultData[i][j] = this.data[i][j] - other.data[i][j];
            }
        }
        return new Matrix(resultData);
    }

    // Метод для умножения матрицы на число
    public Matrix multiply(double scalar) {
        double[][] resultData = new double[this.getRows()][this.getColumns()];
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                resultData[i][j] = this.data[i][j] * scalar;
            }
        }
        return new Matrix(resultData);
    }

    // Метод для произведения двух матриц
    public Matrix multiply(Matrix other) {
        if (this.getColumns() != other.getRows()) {
            throw new IllegalArgumentException("Размеры матриц не совпадают для умножения.");
        }
        double[][] resultData = new double[this.getRows()][other.getColumns()];
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < other.getColumns(); j++) {
                resultData[i][j] = 0;
                for (int k = 0; k < this.getColumns(); k++) {
                    resultData[i][j] += this.data[i][k] * other.data[k][j];
                }
            }
        }
        return new Matrix(resultData);
    }

    // Метод для транспонирования матрицы
    public Matrix transpose() {
        double[][] resultData = new double[this.getColumns()][this.getRows()];
        for (int i = 0; i < this.getRows(); i++) {
            for (int j = 0; j < this.getColumns(); j++) {
                resultData[j][i] = this.data[i][j];
            }
        }
        return new Matrix(resultData);
    }

    // Метод для возведения матрицы в степень
    public Matrix power(int exponent) {
        if (this.getRows() != this.getColumns()) {
            throw new IllegalArgumentException("Матрица должна быть квадратной для возведения в степень.");
        }
        Matrix result = new Matrix(this.data);
        Matrix base = new Matrix(this.data);
        for (int i = 1; i < exponent; i++) {
            result = result.multiply(base);
        }
        return result;
    }

    // Метод для вывода матрицы
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (double[] row : data) {
            for (double value : row) {
                sb.append(value).append(" ");
            }
            sb.append("\n");
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        double[][] data1 = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };

        double[][] data2 = {
                {9, 8, 7},
                {6, 5, 4},
                {3, 2, 1}
        };

        Matrix matrix1 = new Matrix(data1);
        Matrix matrix2 = new Matrix(data2);

        System.out.println("Матрица 1:");
        System.out.println(matrix1);

        System.out.println("Матрица 2:");
        System.out.println(matrix2);

        System.out.println("Матрица 1 + Матрица 2:");
        System.out.println(matrix1.add(matrix2));

        System.out.println("Матрица 1 - Матрица 2:");
        System.out.println(matrix1.subtract(matrix2));

        System.out.println("Матрица 1 * 2:");
        System.out.println(matrix1.multiply(2));

        System.out.println("Матрица 1 * Матрица 2:");
        System.out.println(matrix1.multiply(matrix2));

        System.out.println("Транспонированная матрица 1:");
        System.out.println(matrix1.transpose());

        System.out.println("Матрица 1 в степени 2:");
        System.out.println(matrix1.power(2));
    }
}
