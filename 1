это в pom
<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <version>42.7.4</version> 
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.4.0</version>
</dependency>
 
Код:
package org.example;

import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class MathOperations {

    private static final String URL = "jdbc:postgresql://localhost:5432/mydatabase";
    private static final String USER = "postgres";
    private static final String PASSWORD = "1";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean exit = false;

        while (!exit) {
            System.out.println("Выберите действие:");
            System.out.println("1. Вывести все таблицы из PostgreSQL.");
            System.out.println("2. Создать таблицу в PostgreSQL.");
            System.out.println("3. Сложение чисел.");
            System.out.println("4. Вычитание чисел.");
            System.out.println("5. Умножение чисел.");
            System.out.println("6. Деление чисел.");
            System.out.println("7. Деление чисел по модулю (остаток).");
            System.out.println("8. Возведение числа в модуль.");
            System.out.println("9. Возведение числа в степень.");
            System.out.println("10. Сохранить все данные из PostgreSQL в Excel и вывести на экран.");
            System.out.println("0. Выход.");

            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    listTables();
                    break;
                case 2:
                    createTable();
                    break;
                case 3:
                    performOperation("Сложение", (a, b) -> a + b);
                    break;
                case 4:
                    performOperation("Вычитание", (a, b) -> a - b);
                    break;
                case 5:
                    performOperation("Умножение", (a, b) -> a * b);
                    break;
                case 6:
                    performOperation("Деление", (a, b) -> a / b);
                    break;
                case 7:
                    performOperation("Деление по модулю", (a, b) -> a % b);
                    break;
                case 8:
                    performOperation("Модуль числа", (a, b) -> Math.abs(a));
                    break;
                case 9:
                    performOperation("Возведение в степень", (a, b) -> Math.pow(a, b));
                    break;
                case 10:
                    saveToExcel();
                    break;
                case 0:
                    exit = true;
                    break;
                default:
                    System.out.println("Неверный выбор. Попробуйте снова.");
            }
        }
        scanner.close();
    }

    private static void listTables() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT table_name FROM information_schema.tables WHERE table_schema='public'")) {

            while (rs.next()) {
                System.out.println(rs.getString("table_name"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void createTable() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             Statement stmt = conn.createStatement()) {

            stmt.execute("CREATE TABLE IF NOT EXISTS results (id SERIAL PRIMARY KEY, operation VARCHAR(50), result DOUBLE PRECISION)");
            System.out.println("Таблица создана.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void performOperation(String operation, Operation op) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите первое число: ");
        double a = scanner.nextDouble();
        System.out.print("Введите второе число: ");
        double b = scanner.nextDouble();
        double result = op.apply(a, b);

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO results (operation, result) VALUES (?, ?)")) {

            pstmt.setString(1, operation);
            pstmt.setDouble(2, result);
            pstmt.executeUpdate();
            System.out.println("Результат: " + result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void saveToExcel() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM results")) {

            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Results");
            Row header = sheet.createRow(0);
            header.createCell(0).setCellValue("ID");
            header.createCell(1).setCellValue("Operation");
            header.createCell(2).setCellValue("Result");

            int rowNum = 1;
            while (rs.next()) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(rs.getInt("id"));
                row.createCell(1).setCellValue(rs.getString("operation"));
                row.createCell(2).setCellValue(rs.getDouble("result"));
            }

            try (FileOutputStream fileOut = new FileOutputStream("results.xlsx")) {
                workbook.write(fileOut);
            }

            System.out.println("Данные сохранены в results.xlsx");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FunctionalInterface
    interface Operation {
        double apply(double a, double b);
    }
}
это в sql это в одну строку можешь говорить:

CREATE TABLE results (id SERIAL PRIMARY KEY, operation VARCHAR(50), result DOUBLE PRECISION);
