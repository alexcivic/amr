class Task5 {

 	// Класс узла дерева
 	static class Node {
     	int value;
     	Node left;
     	Node right;

     	Node(int value) {
         	this.value = value;
         	left = null;
         	right = null;
     	}
 	}

 	private Node root;

 	public Task5() {
     	root = null;
 	}

 	// Метод для вставки значения в дерево
 	public void insert(int value) {
     	root = insertRecursively(root, value);
 	}

 	private Node insertRecursively(Node current, int value) {
     	if (current == null) {
         	return new Node(value);
     	}
     	if (value < current.value) {
         	current.left = insertRecursively(current.left, value);
     	} else if (value > current.value) {
         	current.right = insertRecursively(current.right, value);
     	}
     	return current;
 	}

 	// Метод для поиска значения в дереве
 	public boolean search(int value) {
     	return searchRecursively(root, value);
 	}

 	private boolean searchRecursively(Node current, int value) {
     	if (current == null) {
         	return false;
     	}
     	if (value == current.value) {
         	return true;
     	}
     	return value < current.value
             	? searchRecursively(current.left, value)
             	: searchRecursively(current.right, value);
 	}

 	// Метод для удаления значения из дерева
 	public void delete(int value) {
     	root = deleteRecursively(root, value);
 	}

 	private Node deleteRecursively(Node current, int value) {
     	if (current == null) {
         	return null;
     	}
     	if (value == current.value) {
         	// Узел без детей
         	if (current.left == null && current.right == null) {
             	return null;
         	}
         	// Узел с одним дочерним элементом
         	if (current.left == null) {
             	return current.right;
         	}
         	if (current.right == null) {
             	return current.left;
         	}
         	// Узел с двумя дочерними элементами
         	int smallestValue = findSmallestValue(current.right);
         	current.value = smallestValue;
         	current.right = deleteRecursively(current.right, smallestValue);
         	return current;
     	}
  	   if (value < current.value) {
         	current.left = deleteRecursively(current.left, value);
         	return current;
     	}
     	current.right = deleteRecursively(current.right, value);
     	return current;
 	}

 	private int findSmallestValue(Node root) {
     	return root.left == null ? root.value : findSmallestValue(root.left);
 	}

 	// Обход дерева: in-order (левый, корень, правый)
 	public void inorderTraversal() {
     	inorderTraversalRecursively(root);
 	}

 	private void inorderTraversalRecursively(Node node) {
     	if (node != null) {
             inorderTraversalRecursively(node.left);
         	System.out.print(node.value + " ");
             inorderTraversalRecursively(node.right);
     	}
 	}

 	public static void main(String[] args) {
     	Task5 bst = new Task5();

     	// Пример работы с деревом
     	bst.insert(50);
     	bst.insert(30);
     	bst.insert(70);
     	bst.insert(20);
     	bst.insert(40);
     	bst.insert(60);
     	bst.insert(80);

     	System.out.println("In-order обход дерева:");
     	bst.inorderTraversal();

     	System.out.println("\nПоиск значения 40: " + (bst.search(40) ? "найдено" : "не найдено"));
     	System.out.println("Удаление значения 40.");
     	bst.delete(40);

     	System.out.println("In-order обход дерева после удаления:");
     	bst.inorderTraversal();
 	}
 }
